package BillboardServer.Misc;

import java.time.Instant;
import java.util.HashMap;
import java.util.Random;

public class SessionToken {
    public static final HashMap<String, Long> sessionTokenStorage = new HashMap<>(); // Used for storing the session token generated in login case + time of login.
    private static final Random rng = new Random(); // Used for generating random bytes in createSessionToken method.
    /**
     * Converts bytes to a string. This is used in the createSessionToken method to convert the randomly generated bytes to a string.
     * @param hash
     * @return Returns a string.
     */
    // From week 10 assignment Q&A lecture.
    private static String bytesToString(byte[] hash){
        StringBuffer sb = new StringBuffer();
        for (byte b : hash){
            sb.append(String.format("%02x", b & 0xFF));
        }
        return sb.toString();
    }

    /**
     * Creates a session token, which is used to verify that the user currently logged in was logged in properly.
     * This session token is then used in each request to check that the user is still logged in.
     * It also commits this token to the storage
     * @return Returns a session token in the form of a random string.
     */
    // From Week 10 Assignment Q&A Lecture.
    public static String createSessionToken(){
        byte[] randomBytes = new byte[32];
        rng.nextBytes(randomBytes);
        String session_token = bytesToString(randomBytes); // Go back to see the bytestoString method.
        Long loginUnixTime = Instant.now().getEpochSecond(); // Gets the time elapsed in seconds since unix epoch.
        sessionTokenStorage.put(session_token, loginUnixTime); // Need to store the current time.
        return session_token;
    }

    /**
     * Checks if the session token sent by the control panel is valid or not.
     * Used in verifying user before commands in the Parse method.
     * @param sessionToken The session token that the client uses is entered here.
     * @return Returns the boolean returnStatement. If the hashmap validSessionToken contains @param sessionToken, then this is true.
     */
    // Based on week 10 assignment Q&A lecture.
    public static boolean isSessionTokenValid(String sessionToken){
        boolean returnStatment = false;
        // If the sessionToken entered by client exists, checks whether 24 hours has passed from the current command attempt timestamp, from the sessionToken timestamp, measured in seconds.
        if (sessionTokenStorage.containsKey(sessionToken)){
            Long loginTimeLong = sessionTokenStorage.get(sessionToken); // Gets the login time value associated to the session token entered, from the hashmap validSessionToken.
            Long commandTimeUnix = Instant.now().getEpochSecond(); // Gets the time elapsed in seconds since unix epoch for the current command.
            Long differenceBetweenTimes = commandTimeUnix - loginTimeLong;
            returnStatment = differenceBetweenTimes < 86400;
        }

        return returnStatment;
    }

}
